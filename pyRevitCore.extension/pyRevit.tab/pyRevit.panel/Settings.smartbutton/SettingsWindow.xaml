<!--https://stackoverflow.com/questions/6850713/weird-xaml-parsing-error-when-trying-to-set-textbox-isreadonly-->
<Window xmlns="http://schemas.microsoft.com/winfx/2006/xaml/presentation"
        xmlns:x="http://schemas.microsoft.com/winfx/2006/xaml"
        xmlns:s="clr-namespace:System;assembly=mscorlib"
        Title="pyRevit Settings"
        Height="750" Width="700"
        ShowInTaskbar="False" ResizeMode="CanResizeWithGrip"
        WindowStartupLocation="CenterScreen" HorizontalContentAlignment="Center">
    <Window.Resources>
        <s:Boolean x:Key="BooleanTrue">True</s:Boolean>

        <Style x:Key="AnimatedSwitch" TargetType="{x:Type ToggleButton}">
            <Setter Property="Foreground" Value="Black" />
            <Setter Property="Background" Value="#FAFAFB" />
            <Setter Property="BorderBrush" Value="#CCCCCC" />
            <Setter Property="Template">
                <Setter.Value>
                    <ControlTemplate TargetType="ToggleButton">
                        <Viewbox Stretch="Uniform">
                            <Canvas Name="Layer_1" Width="20" Height="20" Canvas.Left="10" Canvas.Top="0">
                                <Ellipse  Canvas.Left="0" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                                <Ellipse  Canvas.Left="15" Width="20" Height="20" Fill="{TemplateBinding Background}" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1"/>
                                <Border Canvas.Left="10" Width="15" Height="20" Name="rect416927" Background="{TemplateBinding Background}" BorderBrush="{TemplateBinding BorderBrush}" BorderThickness="0,1,0,1"/>
                                <Ellipse x:Name="ellipse"  Canvas.Left="0" Width="20" Height="20" Fill="White" Stroke="{TemplateBinding BorderBrush}" StrokeThickness="1">
                                    <Ellipse.RenderTransform>
                                        <TranslateTransform X="0" Y="0" />
                                    </Ellipse.RenderTransform>
                                </Ellipse>
                            </Canvas>
                        </Viewbox>
                        <ControlTemplate.Triggers>
                            <Trigger Property="IsChecked" Value="True" >
                                <Trigger.EnterActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#2c3e50" Duration="0:0:0.2" />
                                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#1e2b38" Duration="0:0:0.2" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="0"/>
                                                <SplineDoubleKeyFrame KeyTime="0:0:0.4" Value="15" KeySpline="0, 1, 0.6, 1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.EnterActions>
                                <Trigger.ExitActions>
                                    <BeginStoryboard>
                                        <Storyboard>
                                            <ColorAnimation Storyboard.TargetProperty="Background.Color" To="#FAFAFB" Duration="0:0:0.2" />
                                            <ColorAnimation Storyboard.TargetProperty="BorderBrush.Color" To="#CCCCCC" Duration="0:0:0.2" />
                                            <DoubleAnimationUsingKeyFrames Storyboard.TargetProperty="(Ellipse.RenderTransform).(TranslateTransform.X)" Storyboard.TargetName="ellipse">
                                                <SplineDoubleKeyFrame KeyTime="0" Value="15"/>
                                                <SplineDoubleKeyFrame KeyTime="0:0:0.3" Value="0" KeySpline="0, 0.5, 0.5, 1"/>
                                            </DoubleAnimationUsingKeyFrames>
                                        </Storyboard>
                                    </BeginStoryboard>
                                </Trigger.ExitActions>
                            </Trigger>
                        </ControlTemplate.Triggers>
                    </ControlTemplate>
                </Setter.Value>
            </Setter>
        </Style>

        <Style TargetType="{x:Type TextBox}">
            <Style.Triggers>
                <Trigger Property="IsReadOnly" Value="{StaticResource BooleanTrue}">
                    <Setter Property="Background" Value="#d4d9d0" />
                    <Setter Property="Foreground" Value="#4f693a" />
                </Trigger>
            </Style.Triggers>
        </Style>

        <Style x:Key="RevitCheckbox" TargetType="{x:Type CheckBox}">
            <Setter Property="LayoutTransform">
                <Setter.Value>
                    <ScaleTransform ScaleX="1.1" ScaleY="1.1"/>
                </Setter.Value>
            </Setter>
        </Style>

        <Canvas x:Key="engineIcon">
            <Path Canvas.Top="-5" Canvas.Left="0"
                  Data="M8,10H16V18H11L9,16H7V11M7,4V6H10V8H7L5,10V13H3V10H1V18H3V15H5V18H8L10,20H18V16H20V19H23V9H20V12H18V8H12V6H15V4H7Z"
                  Fill="{DynamicResource pyRevitDarkBrush}">
                <Path.LayoutTransform>
                    <ScaleTransform ScaleX="1.7" ScaleY="1.7" />
                </Path.LayoutTransform>
            </Path>
        </Canvas>

    </Window.Resources>
    <DockPanel>
        <Grid Background="{DynamicResource pyRevitDarkBrush}" DockPanel.Dock="Bottom">
            <WrapPanel HorizontalAlignment="Right">
                <Button x:Name="save_b" Background="White" Content="Just Save Settings" Click="save_settings" Width="150" Margin="10,10,10,10" Height="24"/>
                <Button x:Name="savereload_b" Background="White" Content="Save Settings and Reload" Click="save_settings_and_reload" Width="200" Margin="10,10,10,10" Height="24"/>
            </WrapPanel>
        </Grid>
        <ScrollViewer VerticalScrollBarVisibility="Auto">
            <StackPanel>
                <Expander Header="Core Settings" IsExpanded="False" Margin="10px">
                    <StackPanel Margin="10px">
                        <GroupBox Header="General">
                            <StackPanel>
                                <WrapPanel Margin="10,15,0,5">
                                    <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="rocketmode_cb" IsChecked="False"/>
                                    <TextBlock Margin="30,4,0,0">Rocket Mode &#x1F680; (Reload Required)</TextBlock>
                                </WrapPanel>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="65,0,10,10">This is the switch for pyRevit Rocket Mode.
                                                                                               If enabled, pyRevit will use a shared engine per each extension
                                                                                               that supports the Rocket mode. For pyRevit developers,
                                                                                               this means that your custom python modules should not use any
                                                                                               module level variables that retain information from Revit like
                                                                                               the active document, element information, etc.
                                                                                               Why Rocket Mode? Yuuuuuge speed boost!!</TextBlock>
                                <WrapPanel Margin="10,10,0,10">
                                    <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="checkupdates_cb" IsChecked="False"/>
                                    <TextBlock Margin="30,4,0,0">Check updates at startup</TextBlock>
                                </WrapPanel>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="65,0,10,10">If activated, pyRevit will check updates for all installed extensions
                                                                                               at Revit startup. If no internet connection is detected, update check will be skipped.</TextBlock>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Header="Engines" Margin="0,10,0,0">
                            <StackPanel>
                                <DockPanel Margin="10,10,0,0" >
                                    <ContentControl Content="{StaticResource engineIcon}"
                                                    Width="32" Height="32" VerticalAlignment="Center"
                                                    DockPanel.Dock="Left">
                                        <ContentControl.LayoutTransform>
                                            <ScaleTransform ScaleX="1"  ScaleY="1"/>
                                        </ContentControl.LayoutTransform>
                                    </ContentControl>
                                    <TextBlock Margin="20,0,10,0" VerticalAlignment="Center" DockPanel.Dock="Left">Active Engine:</TextBlock>
                                    <ComboBox x:Name="availableEngines" Margin="0,0,10,0"
                                              DisplayMemberPath="name" Height="24"
                                              VerticalContentAlignment="Center"/>
                                </DockPanel>
                                <DockPanel Margin="42,5,0,10" >
                                    <TextBlock Margin="20,0,10,0" VerticalAlignment="Center" DockPanel.Dock="Left">Active CPython Engine:</TextBlock>
                                    <ComboBox x:Name="cpythonEngines" Margin="0,0,10,0"
                                              DisplayMemberPath="name" Height="24"
                                              VerticalContentAlignment="Center"/>
                                </DockPanel>
                                <StackPanel Margin="10,5,10,10">
                                    <TextBlock FontWeight="Medium">Using CPython:</TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0,5,0,0">
                                        pyRevit can use a CPython (x64) engine to run a command instead of the active IronPython Engine. This means that all
                                        CPython modules (e.g. numpy, scipy) can be used within Revit environment. Note that Revit is a x64 program and
                                        will only work with the x64 version of CPython.
                                    </TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0,5,0,0">
                                        The CPython engine is shipped with pyRevit so you do not need to have it installed on your machine. However if
                                        you intend to use third-party libraries, make sure you have the same version of CPython as the selected
                                        engine here, installed on your machine.
                                    </TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0,5,0,0">
                                        PYTHONPATH environment variable must point to the "site-packages" directory, so modules
                                        installed with "pip" package manager, could be found and loaded.
                                    </TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0,15,0,0">
                                        To run a script with CPython, first line of the script file must be:
                                    </TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="20,5,0,0" FontFamily="Consolas">
                                        #! python3
                                    </TextBlock>
                                    <TextBlock TextWrapping="WrapWithOverflow" Margin="0,20,0,0">
                                        Save settings after changing the engine and then restart Revit.
                                    </TextBlock>
                                </StackPanel>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Header="Development" Margin="0,10,0,0">
                            <StackPanel>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="10,10,10,0">Misc options for pyRevit development</TextBlock>
                                <WrapPanel Margin="10,10,0,10">
                                    <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="loadbetatools_cb" IsChecked="False"/>
                                    <TextBlock Margin="30,4,0,0">Load Beta Tools (Scripts with __beta__ = True, Reload is required)</TextBlock>
                                </WrapPanel>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Header="Caching" Margin="0,10,0,0">
                            <StackPanel>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="10,10,10,0">pyRevit caches the extension data so it can run faster.
                                                                                               This section controls the type of caching.
                                                                                               Restart is required after changing this setting.</TextBlock>
                                <RadioButton x:Name="bincache_rb" GroupName="cache_type" Margin="10,10,0,5" IsChecked="False">Binary Cache</RadioButton>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="26,0,10,0">Binary cache is the fastest but the cache files are not human readable
                                                                                              and not very useful for debugging.</TextBlock>

                                <RadioButton x:Name="asciicache_rb" GroupName="cache_type" Margin="10,15,0,5" IsChecked="False">ASCII Cache</RadioButton>
                                <TextBlock TextWrapping="WrapWithOverflow" Margin="26,0,10,10">ASCII cache files are JSON files and are human readable.
                                                                                               They are very helpful for debugging purposes.</TextBlock>

                                <Button Content="Reset Caching to default" Height="24" Click="resetcache" HorizontalAlignment="Right" Width="200px" Margin="0,10,10,10"/>
                            </StackPanel>
                        </GroupBox>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Environment Variables" IsExpanded="False" Margin="10px">
                    <StackPanel Margin="10px">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            Environment Variables are set in current Application Domain (AppDomain) and
                            are available to scripts. They're used as global flags for setting
                            reporting mode, and also by scripts (e.g. Sync Views) to set their current toggle state.
                            These variables are accessible by scripts through pyrevit.script module.
                        </TextBlock>
                        <ListView x:Name="envvars_lb" Margin="0,10,0,0" Height="300" FontFamily="Consolas">
                            <ListView.Resources>
                                <ContextMenu x:Key="ItemContextMenu">
                                    <MenuItem x:Name="menuItem_CopyValue"
                                             Click="copy_envvar_value"
                                             Header="Copy Variable Value">
                                    </MenuItem>
                                    <MenuItem x:Name="menuItem_CopyId"
                                             Click="copy_envvar_id"
                                             Header="Copy Variable Name">
                                    </MenuItem>
                                </ContextMenu>
                            </ListView.Resources>
                            <ListView.ItemContainerStyle>
                                <Style TargetType="{x:Type ListViewItem}">
                                    <Setter Property="VerticalContentAlignment" Value="Top" />
                                    <Setter Property="ContextMenu" Value="{StaticResource ItemContextMenu}"/>
                                </Style>
                            </ListView.ItemContainerStyle>
                            <ListView.View>
                                <GridView>
                                    <GridViewColumn Header="Variable Name" Width="170" DisplayMemberBinding="{Binding Id}"/>
                                    <GridViewColumn Header="Value" Width="445">
                                        <GridViewColumn.CellTemplate>
                                            <DataTemplate>
                                                <TextBlock Text="{Binding Value}" TextWrapping="Wrap"/>
                                            </DataTemplate>
                                        </GridViewColumn.CellTemplate>
                                    </GridViewColumn>
                                </GridView>
                            </ListView.View>
                        </ListView>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Reporting Levels" IsExpanded="False" Margin="10px">
                    <Grid Margin="10">
                        <Grid.ColumnDefinitions>
                            <ColumnDefinition Width="100" />
                            <ColumnDefinition />
                        </Grid.ColumnDefinitions>
                        <Grid.RowDefinitions>
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                            <RowDefinition />
                        </Grid.RowDefinitions>
                        <Image x:Name="lognone" Width="100" Height="50" Grid.Column="0" Grid.Row="0" VerticalAlignment="Top" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                        <Image x:Name="logverbose" Width="100" Height="50" Grid.Column="0" Grid.Row="1" VerticalAlignment="Top" Margin="0,10,0,0" RenderOptions.BitmapScalingMode="NearestNeighbor" />
                        <Image x:Name="logdebug" Width="100" Height="50" Grid.Column="0" Grid.Row="2" VerticalAlignment="Top" Margin="0,10,0,0" RenderOptions.BitmapScalingMode="NearestNeighbor"/>
                        <StackPanel Grid.Column="1" Grid.Row="0" Margin="10,0,0,0">
                            <RadioButton x:Name="noreporting_rb" GroupName="reporting_level" IsChecked="True">
                                No Reporting (logging.WARNING and above)
                            </RadioButton>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="20,10,0,0">
                                No reports will be printed from the logging system. 
                                This means that pyRevit will not show the output window at
                                Revit startup and all the INFO messages will be suppressed.
                                Only Warnings, Errors, and Critical Errors will be printed.
                            </TextBlock>
                        </StackPanel>
                        <StackPanel Grid.Column="1" Grid.Row="1" Margin="10,10,0,0">
                            <RadioButton x:Name="verbose_rb" GroupName="reporting_level" IsChecked="True">
                                Verbose (logging.INFO and above)
                            </RadioButton>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="20,10,0,0">
                                Verbose reporting opens the output window and only prints the info messages.
                                These messages are meant to provide the most basic necessary information about
                                the current pyRevit session to the user.
                            </TextBlock>
                            <WrapPanel Margin="20,5,0,0">
                                <Label Padding="0" VerticalAlignment="Center">If no errors, close startup window after</Label>
                                <TextBox x:Name="startup_log_timeout" Width="48" Height="24"
                                         Margin="5,0,5,0" Padding="5,0,0,0"
                                         IsEnabled="{Binding ElementName=verbose_rb, Path=IsChecked}"
                                         VerticalContentAlignment="Center"/>
                                <Label  Padding="0" VerticalAlignment="Center">seconds. (Set to 0 to keep it open anyways)</Label>
                            </WrapPanel>
                        </StackPanel>
                        <StackPanel Grid.Column="1" Grid.Row="2" Margin="10,0,0,0">
                            <RadioButton x:Name="debug_rb" GroupName="reporting_level" Margin="0,10,0,0" IsChecked="False">
                                Debug mode (logging.DEBUG and above)
                            </RadioButton>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="20,10,0,0">
                                This activates the pyRevit debug mode which enables all components and scripts to
                                report their debug messages. Generally this causes a very lengthy report and
                                increases the script running time, but it is very valuable for debugging.
                                Activate this only for debugging purposes.
                            </TextBlock>
                        </StackPanel>
                        <StackPanel Grid.Column="0" Grid.ColumnSpan="2" Grid.Row="3" Margin="0,10,0,0">
                            <CheckBox x:Name="filelogging_cb" Margin="0,10,0,0" IsChecked="False">File debug logging</CheckBox>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="20,10,0,0">
                            This activates the pyRevit file debug mode. All debug messages during a session
                            (from loader or tools) will be written to a log file in pyRevit appdata folder. 
                            These files are tagged by Revit session and are automatically cleaned up on every Revit load.
                            </TextBlock>

                            <Button Content="Reset Reporting Level to default" Height="24" Click="resetreportinglevel" HorizontalAlignment="Right" Width="200px" Margin="0,10,10,10"/>
                        </StackPanel>
                    </Grid>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Startup Checks" IsExpanded="False" Margin="10px">
                    <StackPanel Margin="10">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            You can set the required host build number.
                            pyRevit will show a warning if it's being run
                            on a host with different build number. Set to empty
                            to disable
                        </TextBlock>
                        <DockPanel Margin="0,10,0,10">
                            <TextBlock x:Name="requiredhostbuild_t" DockPanel.Dock="Left" VerticalAlignment="Center">
                                        Required Build Number (build):
                            </TextBlock>
                            <Button DockPanel.Dock="Right" Content="Set to Current Host Build Number" Width="200" Margin="10,0,0,0"
                                            Click="reset_requiredhostbuild" ToolTip="Set the required build number to current host build number"/>
                            <TextBox x:Name="requiredhostbuild_tb" Margin="10,0,0,0" Height="24" Padding="5,0,0,0"
                                     VerticalContentAlignment="Center"/>
                        </DockPanel>
                        <TextBlock TextWrapping="WrapWithOverflow">
                            You can set the minimum free space on host drive.
                            pyRevit will show a warning if free space is less
                            than minimum value. Set to 0 to disable.
                        </TextBlock>
                        <DockPanel Margin="0,10,0,10">
                            <TextBlock DockPanel.Dock="Left" Margin="0,2,0,0">Minimum Free Space on Host Drive (in GigaByte):</TextBlock>
                            <TextBox x:Name="minhostdrivefreespace_tb"
                                     Margin="10,0,0,0" Height="24" Padding="5,0,0,0"
                                     VerticalContentAlignment="Center"/>
                        </DockPanel>
                    </StackPanel>

                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Routes" IsExpanded="False" Margin="10px" Expanded="update_telemetry_status_lights">
                    <StackPanel Margin="10px">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            Routes server is a HTTP API micro-framework and server implemented in python as part of pyRevit. The server is accompanied
                            by a python module (pyrevit.routes) that is inspired by python flask and provides necessary functions,
                            type, and decorators to easily define your owne APIs in your extensions.
                            <LineBreak/>
                            <Hyperlink NavigateUri="https://www.notion.so/pyrevitlabs/pyRevit-Routes-HTTP-API-79ef6d4a77b04aca9be6f4e46ffa728e" Click="handle_url_click">
                                See pyRevit Routes Documentation
                            </Hyperlink>
                        </TextBlock>
                        <StackPanel >
                            <WrapPanel Margin="0,15,0,0">
                                <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="routes_cb" IsChecked="False"/>
                                <TextBlock Margin="30,4,0,0" FontWeight="Medium">Routes Server (Beta)</TextBlock>
                            </WrapPanel>
                            <GroupBox Header="REST API Settings" Padding="10" Margin="0,10,0,0">
                                <CheckBox x:Name="coreapi_cb">
                                    <CheckBox.Content>
                                        <TextBlock>
                                            <TextBlock FontFamily="Consolas" FontWeight="Black" >pyrevit-core/</TextBlock>
                                            <LineBreak/>
                                            pyRevitCore extension implements a basic REST API to manage the pyRevit environment
                                            <LineBreak/>
                                            <Hyperlink NavigateUri="https://www.notion.so/pyrevitlabs/Runtime-REST-API-c3b96be059ba4af0ad5304d3e0304f3d" Click="handle_url_click">
                                                See pyRevit Runtime API Documentation
                                            </Hyperlink>
                                        </TextBlock>
                                    </CheckBox.Content>
                                </CheckBox>
                            </GroupBox>
                            <Border x:Name="routesserver_statusbox" Height="25" DockPanel.Dock="Top" Padding="10,0,10,0" Margin="0,10,0,0" Background="LightGray">
                                <TextBlock x:Name="routesserver_statusmsg" Foreground="White" VerticalAlignment="Center"/>
                            </Border>
                            <TextBlock x:Name="routes_exampleblock" DockPanel.Dock="Top" VerticalAlignment="Center" Foreground="DarkGray" Visibility="Collapsed">
                                    Example
                                    <LineBreak/>
                                    <TextBlock x:Name="routes_example" DockPanel.Dock="Top" VerticalAlignment="Center" Foreground="DarkGray" />
                            </TextBlock>
                        </StackPanel>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Telemetry" IsExpanded="False" Margin="10px" Expanded="update_telemetry_status_lights">
                    <StackPanel Margin="10px">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            Telemetry system, records each use of tools under any of the pyRevit extensions.
                            You can activate telemetry and send the data to a server (pyRevit has a builtin telemetry server),
                            or to a series of JSON files in a given directory. If activated, the system will send telemetry records
                            to the destinations provided here. Leave any of the fields blank to disable sending telemetry records to that destination.
                        </TextBlock>
                        <StackPanel >
                            <GroupBox Header="Global Telemetry Settings" Padding="10" Margin="0,10,0,0">
                                <CheckBox x:Name="telemetry_timestamp_cb" Content="Use UTC Timestamps"></CheckBox>
                            </GroupBox>
                            <WrapPanel Margin="0,15,0,0">
                                <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="telemetry_cb" IsChecked="False"/>
                                <TextBlock Margin="30,4,0,0" FontWeight="Medium">Send Script Telemetry</TextBlock>
                            </WrapPanel>
                            <DockPanel Margin="0,10,0,0" IsEnabled="{Binding ElementName=telemetry_cb, Path=IsChecked}">
                                <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center">Script Telemetry Server URL or API Endpoint</TextBlock>
                                <TextBox x:Name="telemetryserver_tb" DockPanel.Dock="Top" FontFamily="Consolas" 
                                         Margin="0,10,0,5" Height="24" Padding="5,0,0,0"
                                         VerticalContentAlignment="Center"
                                         TextChanged="telemetryserver_changed"/>
                                <Border x:Name="telemetryserver_statusbox" Height="25" DockPanel.Dock="Top" Padding="10,0,10,0" Background="LightGray">
                                    <TextBlock x:Name="telemetryserver_statusmsg" Foreground="White"  VerticalAlignment="Center" MouseLeftButtonUp="update_telemetryserver_status_lights"/>
                                </Border>
                                <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center" Foreground="DarkGray">
                                    Example
                                    <LineBreak/>http://telemetry.mycompany.com:8080/api/v2/scripts/
                                </TextBlock>
                            </DockPanel>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="0,15,0,0">
                                If a destination directory is provided here, pyRevit creates a new JSON file for each pyRevit sesssion to avoid creating large files that
                                would potentially slow down the telemetry service. The session id is added to the JSON file name.
                            </TextBlock>
                            <DockPanel Margin="0,10,0,0" IsEnabled="{Binding ElementName=telemetry_cb, Path=IsChecked}">
                                <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center">Current Telemetry JSON File:</TextBlock>
                                <WrapPanel DockPanel.Dock="Right" Margin="0,10,0,0">
                                    <Button Content="Open Folder" Width="90" Margin="6,0,0,0" Height="24"
                                            Click="open_telemetry_folder" ToolTip="Open the current telemetry folder"/>
                                </WrapPanel>
                                <TextBox x:Name="cur_telemetryfile_tb" FontFamily="Consolas" IsReadOnly="True"
                                         Margin="0,10,0,0" Height="24" Padding="5,0,0,0"
                                         VerticalContentAlignment="Center"/>
                            </DockPanel>
                            <DockPanel Margin="0,10,0,0" IsEnabled="{Binding ElementName=telemetry_cb, Path=IsChecked}">
                                <TextBlock DockPanel.Dock="top" VerticalAlignment="Center">Script Telemetry Data Folder (e.g. C:\pyRevitTelemetry):</TextBlock>
                                <WrapPanel DockPanel.Dock="Right" Margin="0,10,0,0">
                                    <Button Content="&#x25CF;&#x25CF;&#x25CF;"
                                            Width="48" Height="24" Margin="6,0,3,0" Padding="0,0,0,2"
                                            Click="pick_telemetry_folder" ToolTip="Pick a folder for telemetry"/>
                                    <Button Content="Reset" Width="48" Height="24" Margin="3,0,0,0" Click="reset_telemetry_folder" ToolTip="Reset telemetry folder back to default"/>
                                </WrapPanel>
                                <TextBox x:Name="telemetryfile_tb" FontFamily="Consolas"
                                         Margin="0,10,0,0" Height="24" Padding="5,0,0,0"
                                         VerticalContentAlignment="Center"/>
                            </DockPanel>
                            <WrapPanel Margin="0,25,0,0">
                                <ToggleButton Style="{StaticResource AnimatedSwitch}" Height="24" x:Name="apptelemetry_cb" IsChecked="False"/>
                                <TextBlock Margin="30,4,0,0" FontWeight="Medium">Send Application Telemetry</TextBlock>
                            </WrapPanel>
                            <TextBlock TextWrapping="WrapWithOverflow" Margin="0,15,0,0">
                                Application Telemetry system, sends event information collected from event handlers to the telemetry server listed below. You can toggle event logging for each of the events listed blow.
                            </TextBlock>
                            <DockPanel Margin="0,10,0,0" IsEnabled="{Binding ElementName=apptelemetry_cb, Path=IsChecked}">
                                <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center">Application Telemetry Server URL or API Endpoint (e.g. http://telemetryserver.io):</TextBlock>
                                <TextBox x:Name="apptelemetryserver_tb" DockPanel.Dock="Top" FontFamily="Consolas" 
                                         Margin="0,10,0,5" Height="24" Padding="5,0,0,0"
                                         VerticalContentAlignment="Center"
                                         TextChanged="apptelemetryserver_changed"/>
                                <Border x:Name="apptelemetryserver_statusbox" Height="25" DockPanel.Dock="Top" Padding="10,0,10,0" Background="LightGray">
                                    <TextBlock x:Name="apptelemetryserver_statusmsg" Foreground="White" VerticalAlignment="Center" MouseLeftButtonUp="update_apptelemetryserver_status_lights"/>
                                </Border>
                                <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center" Foreground="DarkGray">
                                    Example
                                    <LineBreak/>http://telemetry.mycompany.com:8080/api/v2/events/
                                </TextBlock>
                            </DockPanel>
                            <StackPanel x:Name="event_telemetry_sp" Margin="0,10,0,0" IsEnabled="{Binding ElementName=apptelemetry_cb, Path=IsChecked}">
                                <DockPanel>
                                    <Button DockPanel.Dock="Right" Content="Toggle All" Width="80" Height="25" Click="toggle_event_cbs" ></Button>
                                    <TextBlock VerticalAlignment="Center" FontWeight="Medium">Select Active Application Telemetry Events</TextBlock>
                                </DockPanel>
                            </StackPanel>
                        </StackPanel>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Supported Revit Versions" IsExpanded="False" Margin="10px">
                    <StackPanel Margin="10px">
                        <TextBlock x:Name="revitversions_tb" TextWrapping="WrapWithOverflow">
                            You can disable or enable pyRevit for installed
                            Revit versions from here. This effectively removes the
                            pyRevit.addin manifest file from %appdata%/Autodesk/Revit/Addins folders.
                        </TextBlock>
                        <CheckBox x:Name="revit2021_cb" Style="{StaticResource RevitCheckbox}" Margin="0,10,0,0" IsChecked="False" IsEnabled="False">
                            Autodesk Revit 2021
                        </CheckBox>
                        <CheckBox x:Name="revit2020_cb" Style="{StaticResource RevitCheckbox}" Margin="0,10,0,0" IsChecked="False" IsEnabled="False">
                            Autodesk Revit 2020
                        </CheckBox>
                        <CheckBox x:Name="revit2019_cb" Style="{StaticResource RevitCheckbox}" Margin="0,10,0,0" IsChecked="False" IsEnabled="False">
                            Autodesk Revit 2019
                        </CheckBox>
                        <CheckBox x:Name="revit2018_cb" Style="{StaticResource RevitCheckbox}" Margin="0,10,0,0" IsChecked="False" IsEnabled="False">
                            Autodesk Revit 2018
                        </CheckBox>
                        <CheckBox x:Name="revit2017_cb" Style="{StaticResource RevitCheckbox}" Margin="0,10,0,0" IsChecked="False" IsEnabled="False">
                            Autodesk Revit 2017
                        </CheckBox>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="UI / UX" IsExpanded="False" Margin="10px">
                    <StackPanel Margin="10,10,10,0">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            This section provides all the settings related to User Interface (UI) and User Experience (UX).
                        </TextBlock>
                        <GroupBox Header="Region Settings" Margin="0,10,0,0" Padding="10">
                            <StackPanel>
                                <DockPanel>
                                    <TextBlock DockPanel.Dock="Left" VerticalAlignment="Center" Margin="0,0,15,0">Select UI Language:</TextBlock>
                                    <ComboBox x:Name="applocales_cb"/>
                                </DockPanel>
                                <TextBlock Margin="0,10,0,0">
                                    <Hyperlink NavigateUri="https://www.notion.so/pyrevitlabs/Help-Translate-pyRevit-c26063a6c9824667a07c6a40b28c70d4" Click="handle_url_click">
                                        Help Translating pyRevit
                                    </Hyperlink>
                                </TextBlock>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Header="Revit GUI Settings" Margin="0,10,0,0" Padding="10">
                            <StackPanel>
                                <CheckBox x:Name="colordocs_cb" Content="Colorize Open Documents" IsChecked="False" IsEnabled="True"/>
                                <WrapPanel Margin="0,10,0,0">
                                    <Border Width="200" Height="25" HorizontalAlignment="Left" BorderBrush="Black" BorderThickness="0,1,0,0" Background="WhiteSmoke">
                                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="Gray">Revit Project (Colored Top)</TextBlock>
                                    </Border>
                                    <Border Margin="10,0,0,0" Width="200" Height="25" HorizontalAlignment="Left" BorderBrush="Black" BorderThickness="1" Background="WhiteSmoke">
                                        <TextBlock VerticalAlignment="Center" HorizontalAlignment="Center" Foreground="Gray">Revit Family  (Colored Border)</TextBlock>
                                    </Border>
                                </WrapPanel>
                                <TextBlock Foreground="#ffffff" Margin="0,10,0,0">
                                        <Hyperlink NavigateUri="https://www.parallaxteam.com/apps/" Click="handle_url_click">
                                           Kudos to Parallax Team for "Parallax Tabbed Views"
                                        </Hyperlink>
                                </TextBlock>
                            </StackPanel>
                        </GroupBox>
                        <GroupBox Header="pyRevit GUI Settings" Margin="0,10,0,0" Padding="10">
                            <StackPanel>
                                <DockPanel Margin="0,10,0,10">
                                    <TextBlock DockPanel.Dock="Top" VerticalAlignment="Center">Output Styling (CSS Stylesheet)</TextBlock>
                                    <WrapPanel DockPanel.Dock="Right" Margin="0,10,0,0">
                                        <Button Content="&#x25CF;&#x25CF;&#x25CF;" Width="48" Margin="6,0,3,0" Height="24" Padding="0,0,0,2" Click="pick_stylesheet" ToolTip="Pick a CSS style sheet to override the default."/>
                                        <Button Content="Reset" Width="48" Margin="3,0,0,0" Height="24" Click="reset_stylesheet" ToolTip="Reset CSS style sheet back to default"/>
                                    </WrapPanel>
                                    <TextBox x:Name="cur_stylesheet_tb" FontFamily="Consolas"  Margin="0,10,0,0" Height="24" Padding="5,0,0,0" VerticalContentAlignment="Center"/>
                                </DockPanel>
                                <CheckBox x:Name="loadtooltipex_cb" Content="Add Tool Debug Info toTooltips e.g. Class and Assembly Names" IsChecked="False" IsEnabled="True"/>
                            </StackPanel>
                        </GroupBox>
                    </StackPanel>
                </Expander>
                <Separator Margin="10,0,10,0" Background="#dfdfdf"/>
                <Expander Header="Custom Extension Directories" IsExpanded="True" Margin="10px">
                    <StackPanel Margin="10px">
                        <TextBlock TextWrapping="WrapWithOverflow">
                            pyRevit can search in custom folders for extensions.
                            You can setup your custom extensions in any directory and add the directory address here.
                            pyRevit searches these folders on startup and loads the extensions. This helps to decouple the
                            custom extensions from pyRevit's default extension folder so you can upgrade/remove pyRevit without
                            worrying about your own extension folders.
                        </TextBlock>
                        <TextBlock TextWrapping="WrapWithOverflow" Margin="0,10,0,0">
                            Reload is required for changes to take effect.
                        </TextBlock>
                        <DockPanel HorizontalAlignment="Stretch" Margin="0,10,0,0" Height="120px">
                            <StackPanel MinWidth="120px" MaxWidth="200px" DockPanel.Dock="Right">
                                <Button Content="Add folder" Click="addfolder" Margin="0,0,0,5" Height="24"/>
                                <Button Content="Remove Selected" Click="removefolder" Margin="0,0,0,5" Height="24"/>
                                <Button Content="Remove All" Click="removeallfolders" Margin="0,0,0,5" Height="24"/>
                                <Button Content="Reveal in Explorer" Click="openextfolder" Margin="0,0,0,5" Height="24"/>
                            </StackPanel>
                            <ListBox x:Name="extfolders_lb" Margin="0,0,10,0" FontFamily="Consolas">
                            </ListBox>
                        </DockPanel>
                    </StackPanel>
                </Expander>
                <!-- <GroupBox Header="Import / Export Settings:" Margin="10px">
                    <StackPanel>
                        <Button Content="Import Settings" IsEnabled="False" HorizontalAlignment="Right" Width="200px" Margin="0,10,10,0"/>
                        <Button Content="Export Settings" IsEnabled="False" HorizontalAlignment="Right" Width="200px" Margin="0,5,10,10"/>
                    </StackPanel>
                </GroupBox> -->
            </StackPanel>
        </ScrollViewer>
    </DockPanel>
</Window>
